Задача 1.

                   public class RefactorTest {
                   public void someMethod(){
                   System.out.println("do Some usual");
                   System.out.println("do Some usual1");
                   RefCreator.printOperativeRef();
                   System.out.println("do Some usual2");
                   System.out.println("do Some usual3");
                                      }
                   public void someElseMethod(){
                   System.out.println("do Some usual");
                   System.out.println("do Some usual1");
                   RefCreator.printHistoricalRef();
                   System.out.println("do Some usual2");
                   System.out.println("do Some usual3");
                   }


                   static class RefCreator{
                   static void printOperativeRef(){
                   System.out.println("operative ref");
                   }
                   static void printHistoricalRef(){
                   System.out.println("historical ref");
                   }
                   }
                   public static void main(String[] args){
                   RefactorTest refactorTest = new RefactorTest();
                   refactorTest.someMethod();
                   refactorTest.someElseMethod();
                   }
                   }

В предложенном классе видим дублирование кода в 2-х методах. Напишите
оптимизированный код (проведите рефакторинг), сохранив сигнатуру методов
someMethod и someElseMethod неизменной.

  ОТВЕТ :
                public class RefactorTest {
                    public void someMethod(){
                        printDoSome("do Some usual", "do Some usual1");
                        RefCreator.printOperativeRef();
                        printDoSome("do Some usual2", "do Some usual3");
                    }
                    public void someElseMethod(){
                        printDoSome("do Some usual", "do Some usual1");
                        RefCreator.printHistoricalRef();
                        printDoSome("do Some usual2", "do Some usual3");
                    }

                    private void printDoSome(String do_Some_usual2, String do_Some_usual3) {
                        System.out.println(do_Some_usual2);
                        System.out.println(do_Some_usual3);
                    }

                    static class RefCreator{
                        static void printOperativeRef(){
                            System.out.println("operative ref");
                        }
                        static void printHistoricalRef(){
                            System.out.println("historical ref");
                        }
                    }
                    public static void main(String[] args){
                        RefactorTest refactorTest = new RefactorTest();
                        refactorTest.someMethod();
                        refactorTest.someElseMethod();
                    }
                }

    Задача 2.
    1: public class Test {
    2: static String str = "Hello";
    3:
    4: public static void change(String s) {
    5: s = "world";
    6: }
    7:
    8: public static void main(String[] args) {
    9: System.out.println(str);
    10: change(str);
    11: System.out.println(str);
    12: }
    13: }
    Что напечатает метод main? Почему?

      ОТВЕТ :  метод main напечатает "Hello Hello", в методе change происходит создание новой строки
       поэтому при втором выводе str происхоит обращение к тому же полю, что и изначально.



       Задача 3.
       1: public class Test {
       2: class A {
       3: String str = "ab";
       4:
       5: A() {
       6: printLength();
       7: }
       8:
       9: void printLength() {
       10: System.out.println(str.length());
       11: }
       12: }
       13:
       14: class B extends A {
       15: String str = "abc";
       16:
       17: void printLength() {
       18: System.out.println(str.length());
       19: }
       20: }
       21: public static void main(String[] args) {
       22: new Test().new B();
       23: }
       24: }
       Что получится в результате компиляции и исполнения? Почему?

       ОТВЕТ :данный класс не скомпелируется, потому что сначала проинициализируются
               переменные класса родителя, а потом переменные класса наследника, поэтому оразуеться
               две переменных с одинаковым именем .



       Задача 4.
       1: public String join(String[] args) {
       2: String result = "";
       3: for (String arg : args) {
       4: result += arg;
       5: result += ", ";
       6: }
       7: return result;
       8: }
       Какие минусы у данного метода? Проведите CodeReview этого метода

       ОТВЕТ :
       такой метод будет требовать много памяти в результате выполения цикла for, поэтому нужно уйти от такой реалицазии.
       пример возможного решения -
       public class Test2 {
           public static void main(String[] args) {
               Test2 test2 = new Test2();
               String[] seasons = new String[]{"Winter", "Spring", "Summer", "Autumn"};
               test2.join(seasons);
               System.out.println(test2.join(seasons));
           }

           public String join(String[] args) {
               StringBuilder stringBuilder = new StringBuilder();
               Stream.of(args).forEach(arg-> stringBuilder.append(arg).append(", "));
               return stringBuilder.toString();
           }
       }


       Задача 5.
       Ваше Spring приложение падает при запуске:
       Caused by:
       org.springframework.beans.factory.BeanCreationException: Could not
       autowire field: private ru.sbrf.app.Utils
       ru.sbrf.app.handlers.CreateHandler.utils; nested exception is
       org.springframework.beans.factory.NoUniqueBeanDefinitionException:
       No qualifying bean of type [ru.sbrf.app.Utils] is defined:
       expected single matching bean but found 2: commonUtils,customUtils
       В чём может быть проблема? Как её можно решить?

       ОТВЕТ :
       При попытке создания бинов появилась ошибка, потому что подходящих по типу бинов больше одного,
        предотвратить выброс этого исключения можно конкретно указав, какой бин должен быть внедрен.
        Для этого указывается аннотация @Qualifier, @Primary


